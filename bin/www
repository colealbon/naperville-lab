#!/usr/bin/env node
'use strict';
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('demo:server');
var http = require('http');
var config = require(__dirname + '/../config/options.js');

const assign = require('object-assign')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || config.http_port || '3000');
// app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app.callback());

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log(addr, addr.port);
}

var io = require('socket.io')(server);

console.log("socketio starting " + new Date().toLocaleString());

var PULSE = parseInt(new Date().getTime() / 1000, 10);
var PARTICIPANTS = {};

io.on('connection', function(socket) {
    // node server time
    socket.emit('heartbeat', new Date().getTime());
    var pulse = setInterval(function emitpulse() {
        var newpulse = parseInt(new Date().getTime() / 1000, 10);
          if (PULSE !== newpulse) {
              io.sockets.emit('heartbeat', new Date().getTime());
              PULSE = newpulse;
          }
    }, 1000);
    socket.on('disconnect', function() {
        //io.sockets.emit("broadcastState");
        //turn off timestamp every second
        //if somebody is connected their client will reconnect and the timestamps will continue
        clearInterval(pulse);
    });
    function isConnected(sessionId) {
        for (var connected in io.sockets.connected)
            if(connected.indexOf(sessionId) !== -1)
               return true
    }
    socket.on("broadcastState", function(participant) {
        //hide unconnected users
        participant.connected = isConnected(participant.sessionId)

        // upsert the broadcaster's status
        process.nextTick(function() {
            PARTICIPANTS[participant.userId] = participant
            // convert to array and broadcast
            process.nextTick(function () {
                //var participantArr = [];
                var participantArr = Object.keys(PARTICIPANTS).map(function (key) {return PARTICIPANTS[key]});
                //broadcast our array
                process.nextTick(function() {
                    io.sockets.emit('participantlist', JSON.stringify(participantArr))
                })
            })
        })
    });
});
